knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
set.seed(1000)
alpha <- 18
beta <- 2
n_obs <- 500
x <- runif(n_obs, 0, 30)
y <- alpha + beta*x + rnorm(n_obs, 0, 3)
data <- tibble(x = x, y = y)
ggplot(data, aes(x = x, y = y)) + geom_point(size = 2) + theme_bw() + labs(title = 'Simulated Data')
ols_fit <- lm(y ~ x, data = data)
summary(ols_fit)
ols_fit$coefficients
cost_function <- function(alpha, beta, x, y){
y_predicted <- alpha + beta * x
y_difference <- (y_predicted - y)*2
ss <- sum(y_difference)
return(ss)
}
cost_function <- function(alpha, beta, x, y){
y_predicted <- alpha + beta * x
y_difference <- (y_predicted - y)^2
ss <- sum(y_difference)
return(ss)
}
cost_function(alpha, beta, x, y)
sum(resid(ols_fit)^2)
cost_function(
alpha = ols_fit$coefficients[1][[1]],
beta = ols_fit$coefficients[2][[1]],
x = data$x,
y = data$y)
simulations = c()
for (i in -30:30){
mse = cost_function(
alpha = 18,
beta = i,
x = data$x,
y = data$y
)
simulations = c(simulations, mse)
}
plot(x=-30:30, y=simulations)
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- (cost_function(alpha, beta, x, y) - cost_function(alpha, beta - 0.000001, x, y))/0.000001
return (grad_beta)
}
gradient_desc(
alpha = 18,
beta = 0.0,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 2.0,
x = data$x,
y = data$y
)
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- (cost_function(alpha, beta, x, y) - cost_function(alpha, beta - 0.000000001, x, y))/0.000000001
return (grad_beta)
}
gradient_desc(
alpha = 18,
beta = 2.0,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 3.0,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.0,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.5,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.9,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.6,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 2.0,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.9999,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.9,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.99,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.999,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.995,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.996,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.9957,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.9958,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.9959,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.996,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.997,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.9965,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.9964,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.99635,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 1.99638,
x = data$x,
y = data$y
)
delta <- 0.001
minimize_function <- function(alpha, beta, x, y, delta){
new_beta <- beta - delta*gradient_desc(alpha, beta, x, y)
return(new_beta)
}
iter <- 100
res <- c(0)
for (i in 2:iter){
this_beta = res[i-1]
res[i] <- minimize_function(
alpha = alpha, beta = this_beta, x = data$x, y = data$y, delta = delta
)
}
res <- lapply(res, function(x) as.data.frame(t(x))) %>% bind_rows()
colnames(res) <- c('beta')
loss <- res %>% as_tibble() %>% rowwise() %>%
summarise(sse = cost_function(18, beta, data$x, data$y))
res <- res %>% bind_cols(loss) %>%
mutate(iteration = seq(1, 100)) %>% as_tibble()
res %>% glimpse()
delta <- 0.00000001
minimize_function <- function(alpha, beta, x, y, delta){
new_beta <- beta - delta*gradient_desc(alpha, beta, x, y)
return(new_beta)
}
iter <- 100
res <- c(0)
for (i in 2:iter){
this_beta = res[i-1]
res[i] <- minimize_function(
alpha = alpha, beta = this_beta, x = data$x, y = data$y, delta = delta
)
}
res <- lapply(res, function(x) as.data.frame(t(x))) %>% bind_rows()
colnames(res) <- c('beta')
loss <- res %>% as_tibble() %>% rowwise() %>%
summarise(sse = cost_function(18, beta, data$x, data$y))
res <- res %>% bind_cols(loss) %>%
mutate(iteration = seq(1, 100)) %>% as_tibble()
res %>% glimpse()
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- (cost_function(alpha, beta, x, y) - cost_function(alpha, beta - 0.000000001, x, y))/0.000000001
return (grad_beta)
}
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- 2(alpha + beta*x - y)
return (grad_beta)
}
gradient_desc(
alpha = 18,
beta = 1.99638,
x = data$x,
y = data$y
)
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- (cost_function(alpha, beta, x, y) - cost_function(alpha, beta - 0.000000001, x, y))/0.000000001
return (grad_beta)
}
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- 2*(alpha + beta*x - y)
return (grad_beta)
}
gradient_desc(
alpha = 18,
beta = 1.99638,
x = data$x,
y = data$y
)
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- (cost_function(alpha, beta, x, y) - cost_function(alpha, beta - 0.000000001, x, y))/0.000000001
return (grad_beta)
}
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- 2*sum(alpha + beta*x - y)/n(x)
return (grad_beta)
}
gradient_desc(
alpha = 18,
beta = 1.99638,
x = data$x,
y = data$y
)
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- (cost_function(alpha, beta, x, y) - cost_function(alpha, beta - 0.000000001, x, y))/0.000000001
return (grad_beta)
}
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- (2*sum(alpha + beta*x - y))/n(x)
return (grad_beta)
}
gradient_desc(
alpha = 18,
beta = 1.99638,
x = data$x,
y = data$y
)
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- (cost_function(alpha, beta, x, y) - cost_function(alpha, beta - 0.000000001, x, y))/0.000000001
return (grad_beta)
}
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- (2*sum(alpha + beta*x - y))/lenght(x)
return (grad_beta)
}
gradient_desc(
alpha = 18,
beta = 1.99638,
x = data$x,
y = data$y
)
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- (cost_function(alpha, beta, x, y) - cost_function(alpha, beta - 0.000000001, x, y))/0.000000001
return (grad_beta)
}
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- (2*sum(alpha + beta*x - y))/len(x)
return (grad_beta)
}
gradient_desc(
alpha = 18,
beta = 1.99638,
x = data$x,
y = data$y
)
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- (cost_function(alpha, beta, x, y) - cost_function(alpha, beta - 0.000000001, x, y))/0.000000001
return (grad_beta)
}
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- (2*sum(alpha + beta*x - y))/count(x)
return (grad_beta)
}
gradient_desc(
alpha = 18,
beta = 1.99638,
x = data$x,
y = data$y
)
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- (cost_function(alpha, beta, x, y) - cost_function(alpha, beta - 0.000000001, x, y))/0.000000001
return (grad_beta)
}
gradient_desc <- function(alpha, beta, x, y){
grad_beta <- (2*sum(alpha + beta*x - y))/500
return (grad_beta)
}
gradient_desc(
alpha = 18,
beta = 1.99638,
x = data$x,
y = data$y
)
gradient_desc(
alpha = 18,
beta = 2,
x = data$x,
y = data$y
)
delta <- 0.00001
minimize_function <- function(alpha, beta, x, y, delta){
new_beta <- beta - delta*gradient_desc(alpha, beta, x, y)
return(new_beta)
}
iter <- 100
res <- c(0)
for (i in 2:iter){
this_beta = res[i-1]
res[i] <- minimize_function(
alpha = alpha, beta = this_beta, x = data$x, y = data$y, delta = delta
)
}
res <- lapply(res, function(x) as.data.frame(t(x))) %>% bind_rows()
colnames(res) <- c('beta')
loss <- res %>% as_tibble() %>% rowwise() %>%
summarise(sse = cost_function(18, beta, data$x, data$y))
res <- res %>% bind_cols(loss) %>%
mutate(iteration = seq(1, 100)) %>% as_tibble()
res %>% glimpse()
ggplot(res, aes(x = iteration, y = sse)) + geom_point(size = 2) +
theme_classic() + geom_line(aes(group = 1))
ggplot(data, aes(x = x, y = y)) +
geom_point(size = 2) +
geom_abline(aes(intercept = alpha, slope = beta),
data = res, size = 0.5, color = 'red') +
theme_classic() +
geom_abline(aes(intercept = alpha, slope = beta),
data = res %>% slice_head(), size = 0.5, color = 'blue') +
geom_abline(aes(intercept = alpha, slope = beta),
data = res %>% slice_tail(), size = 0.5, color = 'green')
delta <- 0.001
minimize_function <- function(alpha, beta, x, y, delta){
new_beta <- beta - delta*gradient_desc(alpha, beta, x, y)
return(new_beta)
}
iter <- 100
res <- c(0)
for (i in 2:iter){
this_beta = res[i-1]
res[i] <- minimize_function(
alpha = alpha, beta = this_beta, x = data$x, y = data$y, delta = delta
)
}
res <- lapply(res, function(x) as.data.frame(t(x))) %>% bind_rows()
colnames(res) <- c('beta')
loss <- res %>% as_tibble() %>% rowwise() %>%
summarise(sse = cost_function(18, beta, data$x, data$y))
res <- res %>% bind_cols(loss) %>%
mutate(iteration = seq(1, 100)) %>% as_tibble()
res %>% glimpse()
ggplot(res, aes(x = iteration, y = sse)) + geom_point(size = 2) +
theme_classic() + geom_line(aes(group = 1))
ggplot(data, aes(x = x, y = y)) +
geom_point(size = 2) +
geom_abline(aes(intercept = alpha, slope = beta),
data = res, size = 0.5, color = 'red') +
theme_classic() +
geom_abline(aes(intercept = alpha, slope = beta),
data = res %>% slice_head(), size = 0.5, color = 'blue') +
geom_abline(aes(intercept = alpha, slope = beta),
data = res %>% slice_tail(), size = 0.5, color = 'green')
