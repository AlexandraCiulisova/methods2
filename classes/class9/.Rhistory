SE_beta_calc <- function(X,y,theta){
n <- length(y)
x <- X[,2]
y_hat <- X %*% theta
SE_beta <- ((1/(n-2)) *  (sum((y - y_hat)^2))/sum((x-mean(x))^2))
return(sqrt(SE_beta))
}
SE_beta_calc(X_matrix, y , coef$par)
summary(lm(y~ x))
knitr::opts_chunk$set(echo = TRUE)
before_rt <- rnorm(20, mean = 0.843, sd = 0.2)
after_rt <- rnorm(20, mean = 0.695, sd = 0.2)
t.test(before_rt, after_rt, paired = TRUE)
before_rt <- rnorm(20, mean = 664.15, sd = 44.85)
after_rt <- rnorm(20, mean = 581.32, sd = 40.86)
t.test(before_rt, after_rt, paired = TRUE)
t.test(before_rt, after_rt, paired = TRUE)
for i in 1:25{
for (i in 1:25){
print(i)
}
for (i in 1:25){
print(i*2)
}
for (i in 1:25){
print(i**2)
}
for (i in 1:25){
if (i%%2 == 1){
print(i ** 2)
}
}
library(ggplot2)
sample_norm <- rnorm(10, mean = 5, sd = 2)
hist(sample_norm)
df <- data("mtcars")
df2 <- df(df)
df2 <- df(df1)
df1 <- data("mtcars")
df2 <- df(df1)
data("mtcars")
force(mtcars)
df <- mtcars
head(df)
library(tidyverse)
data("mtcars")
df <- mtcars %>%
select(drat, wt)
df %>%
ggplot(aes(x = drat, y = wt)) +
geom_point()
num <- 10
distribution <- rnorm(num, 0, 1)
for (i in length(distribution)){
if (i > 0){
print("positive")
}
else{
print("negative")
}
}
distribution <- rnorm(num, 0, 1)
num <- 10
distribution <- rnorm(num, 0, 1)
for (i in length(distribution)){
if (i > 0){
print("positive")
}
else{
print("negative")
}
}
num <- 10
distribution <- rnorm(num, 0, 1)
for (i in 1:length(distribution)){
if (i > 0){
print("positive")
}
else{
print("negative")
}
}
num <- 10
distribution <- rnorm(num, 0, 1)
for (i in distribution){
if (i > 0){
print("positive")
}
else{
print("negative")
}
}
while sample < 2{
while (sample < 2){
sample <- rnorm(1, 1.5, 0.6)
}
sample <- 0
while (sample < 2){
sample <- rnorm(1, 1.5, 0.6)
}
sample <- 0
while (sample < 2){
sample <- rnorm(1, 1.5, 0.6)
print(sample)
}
while (sample < 2){
sample <- rnorm(1, 1.5, 0.6)
print(sample) #for checking of the values
}
while (sample < 2){
sample <- rnorm(1, 1.5, 0.6)
print(sample) #for checking of the values
}
sample <- 0 #beginning for the loop
while (sample < 2){
sample <- rnorm(1, 1.5, 0.6)
print(sample) #for checking of the values
}
h <- cbind(c(2, 6, 5), c(5, 3, -2), c(7, 4, -3))
h
det(h)
h <- cbind(c(2, 6, 5), c(5, 3, -2), c(7, 4, -3))
h
det(h)
v7 <- cbind(c(1, 2, 3))
v8 <- cbind(c(4, -5, 6))
sum(v7 * v8)
P <- cbind(c(0, 1), c(8, -1))
P
inv(P)
P <- cbind(c(0, 1), c(8, -1))
solve(P)
solve(P)
P <- cbind(c(0, 1), c(8, -1))
inv(P)
library(matlib)
library(matlib)
library(matlib)
library(matlib)
library(matlib)
P <- cbind(c(0, 1), c(8, -1))
inv(P)
P <- cbind(c(0, 1), c(8, -1))
inv(P)
P <- cbind(c(0, 1), c(8, -1))
solve(P)
T <- cbind(c(0, 1, 2, -1), c(-1, 0, 1, 2), c(2, -1, 0, 1), c(1, 2, -1, 0))
T
solve(T)
T_matrix <- cbind(c(0, 1, 2, -1), c(-1, 0, 1, 2), c(2, -1, 0, 1), c(1, 2, -1, 0))
solve(T_matrix)
A <- T_matrix
B <- cbind(c(1,4,7,10), c(2, 5, 8, 11), c(3, 6, 9, 12))
A * B
A <- matrix(T_matrix)
B <- matrix(cbind(c(1,4,7,10), c(2, 5, 8, 11), c(3, 6, 9, 12)))
A * B
print(A * B)
A <- as.matrix(T_matrix)
B <- as.matrix(cbind(c(1,4,7,10), c(2, 5, 8, 11), c(3, 6, 9, 12)))
print(A * B)
A <- as.matrix(T_matrix)
B <- as.matrix(cbind(c(1,4,7,10), c(2, 5, 8, 11), c(3, 6, 9, 12)))
print(A * B)
A <- as.matrix(T_matrix)
View(A)
View(A)
T_matrix <- cbind(c(0, 1, 2, -1), c(-1, 0, 1, 2), c(2, -1, 0, 1), c(1, 2, -1, 0))
View(T_matrix)
View(T_matrix)
A <- as.matrix(T_matrix)
B <- as.matrix(cbind(c(1,4,7,10), c(2, 5, 8, 11), c(3, 6, 9, 12)))
print(A * B)
View(A)
View(A)
View(B)
View(B)
A <- as.matrix(T_matrix)
B <- as.matrix(cbind(c(1,4,7,10), c(2, 5, 8, 11), c(3, 6, 9, 12)))
print(A %*% B)
X_matrix <- rbind(c(1,3,5), c(2,4,6))
Y_matrix <- rbind(c(0, -1, 2, 1), c(1, 0, -1, 2))
X_matrix
Y_matrix
X_matrix <- rbind(c(1,3,5), c(2,4,6))
Y_matrix <- rbind(c(0, -1, 2, 1), c(1, 0, -1, 2))
X_matrix %*% Y_matrix
# Code for simulating
library(tidyverse)
set.seed(42)
df <- data.frame(
x = rep(1:10, each = 5),
y = rnorm(50, rep(1:10, each = 5), 2)
) %>%
mutate(group = ifelse(x <= 5, "A", "B"))
# Calculate mean y value by group
means_group <- df %>%
group_by(group) %>%
summarise(mean_y = mean(y))
# your plot code here
library(ggplot2)
# Code for simulating
library(tidyverse)
set.seed(42)
df <- data.frame(
x = rep(1:10, each = 5),
y = rnorm(50, rep(1:10, each = 5), 2)
) %>%
mutate(group = ifelse(x <= 5, "A", "B"))
# Calculate mean y value by group
means_group <- df %>%
group_by(group) %>%
summarise(mean_y = mean(y))
# your plot code here
library(ggplot2)
library(tidyverse)
df %>%
ggplot(aes(x = x, y = y), fill = as.factor(group)) +
geom_point() +
geom_ablind() +
xlabs(x = "Something", y = "Something")
# Code for simulating
library(tidyverse)
set.seed(42)
df <- data.frame(
x = rep(1:10, each = 5),
y = rnorm(50, rep(1:10, each = 5), 2)
) %>%
mutate(group = ifelse(x <= 5, "A", "B"))
# Calculate mean y value by group
means_group <- df %>%
group_by(group) %>%
summarise(mean_y = mean(y))
# your plot code here
library(ggplot2)
library(tidyverse)
df %>%
ggplot(aes(x = x, y = y), fill = as.factor(group)) +
geom_point() +
geom_abline() +
xlabs(x = "Something", y = "Something")
# Code for simulating
library(tidyverse)
set.seed(42)
df <- data.frame(
x = rep(1:10, each = 5),
y = rnorm(50, rep(1:10, each = 5), 2)
) %>%
mutate(group = ifelse(x <= 5, "A", "B"))
# Calculate mean y value by group
means_group <- df %>%
group_by(group) %>%
summarise(mean_y = mean(y))
# your plot code here
library(ggplot2)
library(tidyverse)
df %>%
ggplot(aes(x = x, y = y), fill = as.factor(group)) +
geom_point() +
geom_abline() +
labs(x = "Something", y = "Something")
# Code for simulating
library(tidyverse)
set.seed(42)
df <- data.frame(
x = rep(1:10, each = 5),
y = rnorm(50, rep(1:10, each = 5), 2)
) %>%
mutate(group = ifelse(x <= 5, "A", "B"))
# Calculate mean y value by group
means_group <- df %>%
group_by(group) %>%
summarise(mean_y = mean(y))
# your plot code here
library(ggplot2)
library(tidyverse)
df %>%
ggplot(aes(x = x, y = y)) +
geom_point(aes(fill = means_group)) +
geom_abline() +
labs(x = "Something", y = "Something")
# Code for simulating
library(tidyverse)
set.seed(42)
df <- data.frame(
x = rep(1:10, each = 5),
y = rnorm(50, rep(1:10, each = 5), 2)
) %>%
mutate(group = ifelse(x <= 5, "A", "B"))
# Calculate mean y value by group
means_group <- df %>%
group_by(group) %>%
summarise(mean_y = mean(y))
# your plot code here
library(ggplot2)
library(tidyverse)
df %>%
ggplot(aes(x = x, y = y)) +
geom_point(fill = means_group) +
geom_abline() +
labs(x = "Something", y = "Something")
# Code for simulating
library(tidyverse)
set.seed(42)
df <- data.frame(
x = rep(1:10, each = 5),
y = rnorm(50, rep(1:10, each = 5), 2)
) %>%
mutate(group = ifelse(x <= 5, "A", "B"))
# Calculate mean y value by group
means_group <- df %>%
group_by(group) %>%
summarise(mean_y = mean(y))
# your plot code here
library(ggplot2)
library(tidyverse)
df %>%
ggplot(aes(x = x, y = y), fill = means_group) +
geom_point() +
geom_abline() +
labs(x = "Something", y = "Something")
# Code for simulating
library(tidyverse)
set.seed(42)
df <- data.frame(
x = rep(1:10, each = 5),
y = rnorm(50, rep(1:10, each = 5), 2)
) %>%
mutate(group = ifelse(x <= 5, "A", "B"))
# Calculate mean y value by group
means_group <- df %>%
group_by(group) %>%
summarise(mean_y = mean(y))
# your plot code here
library(ggplot2)
library(tidyverse)
df %>%
ggplot(aes(x = x, y = y), fill = "blue") +
geom_point() +
geom_abline() +
labs(x = "Something", y = "Something")
# Code for simulating
library(tidyverse)
set.seed(42)
df <- data.frame(
x = rep(1:10, each = 5),
y = rnorm(50, rep(1:10, each = 5), 2)
) %>%
mutate(group = ifelse(x <= 5, "A", "B"))
# Calculate mean y value by group
means_group <- df %>%
group_by(group) %>%
summarise(mean_y = mean(y))
# your plot code here
library(ggplot2)
library(tidyverse)
df %>%
ggplot(aes(x = x, y = y), fill = "blue") +
geom_point(aes(color = means_group)) +
geom_line(means_group) +
labs(x = "Something", y = "Something")
# Code for simulating
library(tidyverse)
set.seed(42)
df <- data.frame(
x = rep(1:10, each = 5),
y = rnorm(50, rep(1:10, each = 5), 2)
) %>%
mutate(group = ifelse(x <= 5, "A", "B"))
# Calculate mean y value by group
means_group <- df %>%
group_by(group) %>%
summarise(mean_y = mean(y))
# your plot code here
library(ggplot2)
library(tidyverse)
df %>%
ggplot(aes(x = x, y = y), color = group) +
geom_point() +
geom_hline(data = means_group) +
labs(x = "Something", y = "Something")
# Code for simulating
library(tidyverse)
set.seed(42)
df <- data.frame(
x = rep(1:10, each = 5),
y = rnorm(50, rep(1:10, each = 5), 2)
) %>%
mutate(group = ifelse(x <= 5, "A", "B"))
# Calculate mean y value by group
means_group <- df %>%
group_by(group) %>%
summarise(mean_y = mean(y))
# your plot code here
library(ggplot2)
library(tidyverse)
df %>%
ggplot(aes(x = x, y = y), color = group) +
geom_point() +
labs(x = "Something", y = "Something")
View(df)
View(df)
# Code for simulating
library(tidyverse)
set.seed(42)
df <- data.frame(
x = rep(1:10, each = 5),
y = rnorm(50, rep(1:10, each = 5), 2)
) %>%
mutate(group = ifelse(x <= 5, "A", "B"))
# Calculate mean y value by group
means_group <- df %>%
group_by(group) %>%
summarise(mean_y = mean(y))
# your plot code here
library(ggplot2)
library(tidyverse)
df %>%
ggplot(aes(x = x, y = y), color = group) +
geom_point() +
geom_hline(data = mean_values, aes(yintercept = y), linetype = "dashed") +
labs(x = "Something", y = "Something")
# Code for simulating
library(tidyverse)
set.seed(42)
df <- data.frame(
x = rep(1:10, each = 5),
y = rnorm(50, rep(1:10, each = 5), 2)
) %>%
mutate(group = ifelse(x <= 5, "A", "B"))
# Calculate mean y value by group
means_group <- df %>%
group_by(group) %>%
summarise(mean_y = mean(y))
# your plot code here
library(ggplot2)
library(tidyverse)
df %>%
ggplot(aes(x = x, y = y), color = group) +
geom_point() +
geom_hline(data = means_group, aes(yintercept = y), linetype = "dashed") +
labs(x = "Something", y = "Something")
# Code for simulating
library(tidyverse)
set.seed(42)
df <- data.frame(
x = rep(1:10, each = 5),
y = rnorm(50, rep(1:10, each = 5), 2)
) %>%
mutate(group = ifelse(x <= 5, "A", "B"))
# Calculate mean y value by group
means_group <- df %>%
group_by(group) %>%
summarise(mean_y = mean(y))
# your plot code here
library(ggplot2)
library(tidyverse)
df %>%
ggplot(aes(x = x, y = y), color = group) +
geom_point() +
geom_hline(data = means_group, linetype = "dashed") +
labs(x = "Something", y = "Something")
# Code for simulating
library(tidyverse)
set.seed(42)
df <- data.frame(
x = rep(1:10, each = 5),
y = rnorm(50, rep(1:10, each = 5), 2)
) %>%
mutate(group = ifelse(x <= 5, "A", "B"))
# Calculate mean y value by group
means_group <- df %>%
group_by(group) %>%
summarise(mean_y = mean(y))
# your plot code here
library(ggplot2)
library(tidyverse)
df %>%
ggplot(aes(x = x, y = y), color = group) +
geom_point() +
geom_line(data = means_group, aes(y = mean_y)) +
labs(x = "Something", y = "Something")
# Simulate data
set.seed(123)
data <- rnorm(100, mean = 50, sd = 10)
# your normality testing code here
data
hist(data)
shapiro.test(data)
qqnorm(data)
qqline(data)
library(car)
leveneTest(y ~ group, data=mydata)
library(car)
leveneTest(y ~ group, data=data)
data <- as.dataframe(data)
data <- df(data)
data <- data.frame(data)
qqnorm(data) #the line seems to follow the data points well
data <- rnorm(100, mean = 50, sd = 10)
# Load the required package
if(!require(lme4)){install.packages("lme4")}
library(lme4)
# Simulate data
set.seed(456)
df <- expand.grid(subj = factor(1:20), x = factor(1:5))
df$y <- rnorm(nrow(df), mean = as.numeric(df$x) * 2, sd = 1)
# your lmer code here
View(df)
View(df)
lmer(y ~ x + (1|subj),data = df)
summary(lmer(y ~ x + (1|subj),data = df))
